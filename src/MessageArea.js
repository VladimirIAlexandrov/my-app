import React, {useState} from 'react';
import LoadingAnimation from "./LoadingAnimation";
import axios from 'axios'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ axios —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ
import { getServerAddress } from './serverConfig';
function MessageArea({ messages, isLoading, username}) {
    const [showRatingMessage, setShowRatingMessage] = useState(false);
    const [showMessage, setShowMessage] = useState(false);
    const [messageText, setMessageText] = useState("");
    const [messageStyle, setMessageStyle] = useState({});
    const timeOutMessageLog = 4000;
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const sendRating = async (pairId, tag, username) => {
        console.log(`Sending rating for pairId: ${pairId}, rating: ${tag}`); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (!username) { // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ username - —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            displayMessage("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–¥–∞–Ω–æ", { backgroundColor: "#dc3545", color: "#fff" });
            return;
        }
        try {
            const address = getServerAddress(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
            const response = await axios.post(`${address}/rate`, {
                id_pair: pairId,
                rating: tag,
                username: "#"+username,
            });
            if (response.data.status === "ok") {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                setShowRatingMessage(true);
                // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                setTimeout(() => {
                    setShowRatingMessage(false);
                }, timeOutMessageLog);
            }
            console.log('–†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞', error);
        }

    };
    const displayMessage = (text, style) => {
        setMessageText(text);
        setMessageStyle(style);
        setShowMessage(true);

        setTimeout(() => {
            setShowMessage(false);
        }, timeOutMessageLog);
    };
    function formatMessage(text) {
        const tripleBackticksRegex = /(```[^`]*```)/g;
        const singleBacktickRegex = /(`[^`]*`)/g;
        let keyIndex = 0;
        const processText = (text, isTriple) => {
            return text.split(isTriple ? tripleBackticksRegex : singleBacktickRegex).map((part) => {
                if (isTriple && part.startsWith("```") && part.endsWith("```")) {

                    return <span key={keyIndex++} style={{ color: 'Teal', fontWeight: 'bold'  }}>{part.slice(3, -3)}</span>;

                } else if (!isTriple && part.startsWith("`") && part.endsWith("`")) {
                    return <strong key={keyIndex++}>{part.slice(1, -1)}</strong>;
                }
                return part;
            });
        };
        const formattedText = processText(text, true).flatMap((part) =>
            typeof part === 'string' ? processText(part, false) : part
        );
        return (
            <div key="formattedText" style={{ whiteSpace: 'pre-wrap' }}>
                {formattedText}
            </div>
        );
    }

    return (
        <div className="message-area">
            {messages.map((msg, index) => (
                <div key={index} className={msg.role}>
                    {formatMessage(msg.content)}
                    {msg.role === 'assistant-message' &&

                        <Greeting role={msg.role} pairId={msg.pairId} onRate={sendRating} username={username} />}

                </div>
            ))}

            {showMessage && (
                <div className="message" style={messageStyle}>
                    {messageText}
                </div>
            )}
            {isLoading && <LoadingAnimation className="loading-animation"/>}
            {showRatingMessage && (
                <div className="rating-message">
                    –û—Ü–µ–Ω–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                </div>

            )}
        </div>
    );
}

function Greeting({ role, pairId, onRate, username }) {
    const [isOpen, setIsOpen] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞

    // –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ —Å —Å–º–∞–π–ª–∏–∫–∞–º–∏
    const tagsWithEmojis = [
        { tag: "#–≤–Ω–∏–º–∞–Ω–∏–µ", emoji: "üëÄ" },
        { tag: "#–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ", emoji: "üß†" },
        { tag: "#–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ", emoji: "üîç" },
        { tag: "#—É–¥–∏–≤–ª–µ–Ω–∏–µ", emoji: "üò≤" },
        { tag: "#–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å", emoji: "ü§î" },
        { tag: "#–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å", emoji: "üèÅ" },
        { tag: "#–æ–ø—Ç–∏–º–∏–∑–º", emoji: "üòä" },
        { tag: "#—Ä–∞–¥–æ—Å—Ç—å", emoji: "üòÉ" },
        { tag: "#—ç–π—Ñ–æ—Ä–∏—è", emoji: "ü•≥" },
        { tag: "#—Å–æ–º–Ω–µ–Ω–∏–µ", emoji: "ü§®" },
        { tag: "#–æ–∑–∞–¥–∞—á–µ–Ω–Ω–æ—Å—Ç—å", emoji: "üòï" },
        { tag: "#–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ", emoji: "üí•" },
        { tag: "#—Ç—Ä–µ–≤–æ–≥–∞", emoji: "üò∞" },
        { tag: "#–Ω–µ–≥–æ–¥–æ–≤–∞–Ω–∏–µ", emoji: "üò°" },
        { tag: "#—Å—Ç—Ä–∞—Ö", emoji: "üò®" },
        { tag: "#—É–∂–∞—Å", emoji: "üò±" },
        { tag: "#–∑–ª–æ—Å—Ç—å", emoji: "üò†" },
        { tag: "#—Å—Ç—Ä–µ—Å—Å", emoji: "üò´" },
        { tag: "#–∞—Ñ—Ñ–µ–∫—Ç–∞—Ü–∏—è", emoji: "ü§•" },
        { tag: "#—Å–∫—É–∫–∞", emoji: "üòí" },
        { tag: "#—É—Ç–æ–º–ª–µ–Ω–∏–µ", emoji: "üò¥" },
        { tag: "#–∞–ø–∞—Ç–∏—è", emoji: "üòî" },
        { tag: "#—É–≥–Ω–µ—Ç–µ–Ω–Ω–æ—Å—Ç—å", emoji: "üòû" },
    ];

    const handleTagClick = (tag) => {
        setIsOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        onRate(pairId, tag, username); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥ –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    };

    return (
        <div className="greeting-container">
            <button className="mark-button" onClick={() => setIsOpen(!isOpen)}>–û—Ü–µ–Ω–∏—Ç—å</button>
            {isOpen && (
                <div className="tags-popup">
                    {tagsWithEmojis.map(({ tag, emoji }, index) => (
                        <button key={index} className="tag-button" onClick={() => handleTagClick(tag)}>
                            {emoji} {tag}
                        </button>
                    ))}
                </div>
            )}

        </div>
    );
}


export default MessageArea;
